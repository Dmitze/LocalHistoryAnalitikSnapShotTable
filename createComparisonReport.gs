// –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
function copyATDataToHistory() {
  copyAllATTables();
}

// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
function createOrUpdateTimeTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  for (const t of triggers) {
    if (t.getHandlerFunction() === 'copyATDataToHistory') {
      ScriptApp.deleteTrigger(t);
    }
    if (t.getHandlerFunction() === 'copyTableWithDiff') {
      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º –Ω–µ–≤–µ—Ä–Ω—ã–π
      ScriptApp.deleteTrigger(t);
    }
  }
  ScriptApp.newTrigger('copyATDataToHistory')
    .timeBased()
    .everyMinutes(1)
    .create();
}

// –ú–µ–Ω—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞')
    .addItem('–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä –∑–∞—Ä–∞–∑', 'copyATDataToHistory')
    .addItem('–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (—â–æ—Ö–≤–∏–ª–∏–Ω–∏)', 'createOrUpdateTimeTrigger')
    .addToUi();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫: –æ–±—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –ª–∏—Å—Ç—ã-–∏—Å—Ç–æ—Ä–∏–∏
function copyAllATTables() {
  const lock = LockService.getScriptLock();
  if (!lock.tryLock(30000)) {
    console.log('‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –∏–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.');
    return;
  }
  try {
    const sourceSpreadsheetId = '';
    const targetSpreadsheetId = '';
    const sourceSheetName = '–ó–∞–≥–∞–ª—å–Ω–∞ –ê–¢';

    const now = new Date();
    const dateTime = Utilities.formatDate(now, 'Europe/Kyiv', 'dd.MM.yy HH:mm');

    const sourceSS = SpreadsheetApp.openById(sourceSpreadsheetId);
    const sourceSheet = sourceSS.getSheetByName(sourceSheetName);
    const targetSS = SpreadsheetApp.openById(targetSpreadsheetId);

    if (!sourceSheet) throw new Error(`–õ–∏—Å—Ç "${sourceSheetName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);

    const tasks = [
      { range: 'A5:O16',  target: 'History –ó–∞–≥–∞–ª—å–Ω–∞ –ê–¢' },
      { range: 'Q5:AE16', target: 'History –ê–¢ 1 –ë–∞—Ç' },
      { range: 'AG5:AU16', target: 'History –ê–¢ 2 –ë–∞—Ç' },
      { range: 'AW5:BK16', target: 'History –ê–¢ 3 –ë–∞—Ç' },
      { range: 'BM5:CA16', target: 'History –†–¢–†' },
      { range: 'CC5:CQ16', target: 'History –†–ú–¢–ó' },
      { range: 'CS5:DG16', target: 'History –Ü–°–†' }
    ];

    for (const t of tasks) {
      const targetSheet = ensureSheet(targetSS, t.target);
      copyTableWithDiff(sourceSheet, targetSheet, t.range, dateTime);
    }
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —É copyAllATTables:', e.message);
    throw e;
  } finally {
    lock.releaseLock();
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è + —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–ª–æ–∫–æ–º
function copyTableWithDiff(sourceSheet, targetSheet, sourceRangeA1, dateTime) {
  if (!sourceSheet || typeof sourceSheet.getRange !== 'function') {
    throw new Error('sourceSheet –Ω–µ —î –ª–∏—Å—Ç–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä —Ç—Ä–∏–≥–≥–µ—Ä: –≤—ñ–Ω –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–±–≥–æ—Ä—Ç–∫—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.');
  }
  if (!targetSheet) throw new Error('targetSheet –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');

  const sourceRange = sourceSheet.getRange(sourceRangeA1);
  const values = sourceRange.getValues();
  const numRows = values.length;
  const numCols = values[0].length;

  const lastRow = targetSheet.getLastRow();
  const nextRow = lastRow === 0 ? 4 : lastRow + 2;

  // –ú–µ—Ç–∫–∞ —á–∞—Å—É –≤ A
  for (let i = 0; i < numRows; i++) {
    targetSheet.getRange(nextRow + i, 1)
      .setValue(dateTime)
      .setNumberFormat('@')
      .setFontStyle('italic')
      .setFontColor('gray')
      .setHorizontalAlignment('center');
  }

  // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –≤ B:...
  const dataRange = targetSheet.getRange(nextRow, 2, numRows, numCols);
  dataRange.setValues(values);

  // –°—Ç–∏–ª—ñ (–±–µ–∑ —Ñ–æ–Ω—É)
  dataRange.setFontColors(sourceRange.getFontColors());
  dataRange.setFontSizes(sourceRange.getFontSizes());
  dataRange.setFontWeights(sourceRange.getFontWeights());
  dataRange.setFontStyles(sourceRange.getFontStyles());
  dataRange.setHorizontalAlignment(sourceRange.getHorizontalAlignment());
  dataRange.setVerticalAlignment(sourceRange.getVerticalAlignment());
  dataRange.setWrapStrategy(sourceRange.getWrapStrategy());

  // –ü–æ—à—É–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–ª–æ–∫—É
  const prevTopRow = findPrevBlockTop(targetSheet, nextRow, numRows);
  const hasPrev = prevTopRow > 0;

  if (hasPrev) {
    const prevValues = targetSheet.getRange(prevTopRow, 2, numRows, numCols).getValues();
    for (let i = 0; i < numRows; i++) {
      for (let j = 2; j < numCols; j++) {
        const cell = dataRange.getCell(i + 1, j + 1);
        const isPercentCol = (j === numCols - 1);
        const newVal = toNum(values[i][j], isPercentCol);
        const oldVal = toNum(prevValues[i][j], isPercentCol);
        const diff = newVal - oldVal;

        if (diff > 0) {
          cell.setValue(formatVal(newVal, isPercentCol) + ' ‚Üë +' + formatVal(diff, isPercentCol))
              .setBackground('#d4edda');
        } else if (diff < 0) {
          cell.setValue(formatVal(newVal, isPercentCol) + ' ‚Üì ' + formatVal(Math.abs(diff), isPercentCol))
              .setBackground('#f8d7da');
        } else {
          cell.setValue(formatVal(newVal, isPercentCol)).setBackground(null);
        }
      }
    }
  } else {
    // –ü–µ—Ä—à–∞ –±–∞–∑–∞ –±–µ–∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∏
    for (let i = 0; i < numRows; i++) {
      for (let j = 2; j < numCols; j++) {
        const isPercentCol = (j === numCols - 1);
        dataRange.getCell(i + 1, j + 1)
          .setValue(formatVal(toNum(values[i][j], isPercentCol), isPercentCol))
          .setBackground(null);
      }
    }
  }
}

// –ü–æ—à—É–∫ –≤–µ—Ä—Ö–Ω—å–æ—ó —Å—Ç—Ä–æ–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–ª–æ–∫—É —Ç—ñ—î—ó –∂ –≤–∏—Å–æ—Ç–∏
function findPrevBlockTop(sheet, nextRow, numRows) {
  let r = nextRow - 1;
  if (r < 2) return 0;
  const colA = sheet.getRange(2, 1, r - 1, 1).getValues();
  while (r >= 2) {
    const val = colA[r - 2][0];
    if (isDateStamp(val)) break;
    r--;
  }
  if (r < 2) return 0;
  const top = r - (numRows - 1);
  return top >= 2 ? top : 0;
}

function isDateStamp(v) {
  return (typeof v === 'string') && /^\d{2}\.\d{2}\.\d{2} \d{2}:\d{2}$/.test(v);
}

function toNum(v, isPercent) {
  if (v === null || v === '' || v === undefined) return 0;
  if (typeof v === 'number') return isNaN(v) ? 0 : v;
  let s = String(v)
    .replace(/‚Üë.*$/, '')
    .replace(/‚Üì.*$/, '')
    .replace(/%/g, '')
    .replace(/[^\d,\-\.]/g, '')
    .replace(/,/g, '.')
    .trim();
  let num = parseFloat(s);
  return isNaN(num) ? 0 : num;
}

function formatVal(x, isPercent) {
  if (isPercent) return (Math.round(x * 100) / 100).toFixed(2) + '%';
  return String(Math.round(x));
}

// –°–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function ensureSheet(ss, name) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  return sh;
}
